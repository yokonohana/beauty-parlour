import express from 'express';
import multer from 'multer';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';
import db from './db.js';

const router = express.Router();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// üìÅ –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ uploads —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const uploadDir = path.join(__dirname, 'uploads');
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir);
}

// ‚öôÔ∏è Multer –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    const uniqueName = Date.now() + '-' + file.originalname;
    cb(null, uniqueName);
  }
});
const upload = multer({ storage });

// üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ gallery
router.post('/upload', upload.single('photo'), async (req, res) => {
  const category = req.body.category || null;

  if (!req.file) {
    return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω' });
  }

  const imageUrl = `/uploads/${req.file.filename}`;

  try {
    const result = await db.query(
      'INSERT INTO gallery (image_url, category) VALUES ($1, $2) RETURNING *',
      [imageUrl, category]
    );

    res.json({
      message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω',
      photo: result.rows[0],
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ gallery:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
router.get('/gallery', async (req, res) => {
  try {
    const { category } = req.query;
    const query = category
      ? 'SELECT * FROM gallery WHERE category = $1 ORDER BY created_at DESC'
      : 'SELECT * FROM gallery ORDER BY created_at DESC';

    const values = category ? [category] : [];

    const result = await db.query(query, values);

    const images = result.rows.map((img) => ({
      id: img.id,
      url: img.image_url,
      category: img.category,
    }));

    res.json(images);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π' });
  }
});

export default router;
